<?php

namespace Proxies\__CG__;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Account extends \Account implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'login', 'name', 'email', 'gender', 'birthday', 'comment');
        }

        return array('__isInitialized__', 'id', 'login', 'name', 'email', 'gender', 'birthday', 'comment');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Account $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function GetId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetId', array());

        return parent::GetId();
    }

    /**
     * {@inheritDoc}
     */
    public function GetLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetLogin', array());

        return parent::GetLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function SetLogin($login)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetLogin', array($login));

        return parent::SetLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function GetName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetName', array());

        return parent::GetName();
    }

    /**
     * {@inheritDoc}
     */
    public function SetName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetName', array($name));

        return parent::SetName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function GetEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetEmail', array());

        return parent::GetEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function SetEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetEmail', array($email));

        return parent::SetEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function GetGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetGender', array());

        return parent::GetGender();
    }

    /**
     * {@inheritDoc}
     */
    public function SetGender($gender)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetGender', array($gender));

        return parent::SetGender($gender);
    }

    /**
     * {@inheritDoc}
     */
    public function GetBirthday()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetBirthday', array());

        return parent::GetBirthday();
    }

    /**
     * {@inheritDoc}
     */
    public function SetBirthday($birthday)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetBirthday', array($birthday));

        return parent::SetBirthday($birthday);
    }

    /**
     * {@inheritDoc}
     */
    public function GetComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'GetComment', array());

        return parent::GetComment();
    }

    /**
     * {@inheritDoc}
     */
    public function SetComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SetComment', array($comment));

        return parent::SetComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function Database()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Database', array());

        return parent::Database();
    }

    /**
     * {@inheritDoc}
     */
    public function Persist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Persist', array());

        return parent::Persist();
    }

    /**
     * {@inheritDoc}
     */
    public function Remove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Remove', array());

        return parent::Remove();
    }

    /**
     * {@inheritDoc}
     */
    public function ToArray($resultPresentation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ToArray', array($resultPresentation));

        return parent::ToArray($resultPresentation);
    }

}
